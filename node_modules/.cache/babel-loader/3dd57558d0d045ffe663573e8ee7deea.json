{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R\\\\Documents\\\\Thinkful\\\\Module23 Project Pomodoro Timer\\\\Qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimeLeft.js\";\nimport React, { useState } from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { useEffect } from \"react\";\n\nconst TimeLeft = ({\n  focusLength\n}) => {\n  const [timeLeft, setTimeLeft] = useState(focusLength);\n  const [intervalId, setIntervalId] = useState(null); //change timeLeft whenever focusLength changes\n\n  useEffect(() => {\n    setTimeLeft(focusLength);\n  }, [focusLength]); //decrement timeLeft by one second\n\n  const handleStartStopClick = () => {\n    //if we are in paused mode\n    const newIntervalId = setInterval(() => {\n      setTimeLeft(prevTimeLeft => {\n        const newTimeLeft = prevTimeLeft - 1;\n\n        if (newTimeLeft >= 0) {\n          return prevTimeLeft - 1;\n        } else {\n          return prevTimeLeft;\n        }\n      });\n    }, 50);\n  };\n\n  let timeLeftInMinutesAndSeconds = secondsToDuration(timeLeft);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, timeLeftInMinutesAndSeconds, \" remaining\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleStartStopClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Start\")));\n};\n\nexport default TimeLeft;","map":{"version":3,"sources":["C:/Users/R/Documents/Thinkful/Module23 Project Pomodoro Timer/Qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeLeft.js"],"names":["React","useState","secondsToDuration","useEffect","TimeLeft","focusLength","timeLeft","setTimeLeft","intervalId","setIntervalId","handleStartStopClick","newIntervalId","setInterval","prevTimeLeft","newTimeLeft","timeLeftInMinutesAndSeconds"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AACpC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAACI,WAAD,CAAxC;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C,CAFoC,CAGpC;;AACAE,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,WAAW,CAACF,WAAD,CAAX;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT,CAJoC,CAStC;;AACA,QAAMK,oBAAoB,GAAI,MAAM;AAChC;AACA,UAAMC,aAAa,GAAIC,WAAW,CAAC,MAAM;AACrCL,MAAAA,WAAW,CAACM,YAAY,IAAI;AAC5B,cAAMC,WAAW,GAAGD,YAAY,GAAG,CAAnC;;AACA,YAAIC,WAAW,IAAI,CAAnB,EAAuB;AACnB,iBAAOD,YAAY,GAAG,CAAtB;AACH,SAFD,MAEM;AACF,iBAAOA,YAAP;AACH;AACA,OAPU,CAAX;AAQH,KATiC,EAS/B,EAT+B,CAAlC;AAUH,GAZD;;AAeE,MAAIE,2BAA2B,GAAGb,iBAAiB,CAACI,QAAD,CAAnD;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,2BADH,6BAEE;AAAQ,IAAA,OAAO,EAAIL,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,CAFF,CADF;AASD,CApCD;;AAsCA,eAAeN,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst TimeLeft = ({ focusLength }) => {\r\n  const [timeLeft, setTimeLeft] = useState(focusLength);\r\n  const [intervalId, setIntervalId] = useState(null)\r\n  //change timeLeft whenever focusLength changes\r\n  useEffect(() => {\r\n    setTimeLeft(focusLength);\r\n  }, [focusLength]);\r\n\r\n\r\n//decrement timeLeft by one second\r\nconst handleStartStopClick  = () => {\r\n    //if we are in paused mode\r\n    const newIntervalId =  setInterval(() => {\r\n        setTimeLeft(prevTimeLeft => {\r\n        const newTimeLeft = prevTimeLeft - 1\r\n        if (newTimeLeft >= 0 ) {\r\n            return prevTimeLeft - 1\r\n        }else {\r\n            return prevTimeLeft\r\n        }\r\n        })\r\n    }, 50)\r\n}\r\n\r\n\r\n  let timeLeftInMinutesAndSeconds = secondsToDuration(timeLeft);\r\n\r\n  return (\r\n    <div>\r\n      {/* TODO: Update message below to include time remaining in the current session */}\r\n      <p className=\"lead\" data-testid=\"session-sub-title\">\r\n        {timeLeftInMinutesAndSeconds} remaining\r\n        <button onClick = {handleStartStopClick}>Start</button>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeLeft;\r\n"]},"metadata":{},"sourceType":"module"}