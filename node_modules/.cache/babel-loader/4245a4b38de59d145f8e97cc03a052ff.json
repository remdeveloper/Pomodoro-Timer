{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R\\\\Documents\\\\Thinkful\\\\Module23 Project Pomodoro Timer\\\\Qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimeLeft.js\";\nimport React, { useState } from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { useEffect } from \"react\";\n\nconst TimeLeft = ({\n  focusLength,\n  breakLength,\n  timeLeft,\n  intervalId,\n  currentSessionType,\n  isTimerRunning\n}) => {\n  //change timeLeft whenever focusLength changes\n  let focusLengthInMinutes = secondsToDuration(focusLength);\n  let breakLengthInMinutes = secondsToDuration(breakLength);\n  let timeLeftInMinutesAndSeconds = secondsToDuration(timeLeft); //if break, use breakLength for total time, focusLength for focus\n\n  let time = currentSessionType === 'Break' ? breakLength : focusLength; //percentage total time - time left for progress bar\n\n  let percentage = (time - timeLeft) / time * 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, currentSessionType === \"Focus\" ? \"Focusing\" : \"On Break\", \" for\", \" \", currentSessionType === \"Focus\" ? focusLengthInMinutes : breakLengthInMinutes, \" \", \"minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, timeLeftInMinutesAndSeconds, \" remaining\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percentage // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${percentage}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default TimeLeft;","map":{"version":3,"sources":["C:/Users/R/Documents/Thinkful/Module23 Project Pomodoro Timer/Qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeLeft.js"],"names":["React","useState","secondsToDuration","useEffect","TimeLeft","focusLength","breakLength","timeLeft","intervalId","currentSessionType","isTimerRunning","focusLengthInMinutes","breakLengthInMinutes","timeLeftInMinutesAndSeconds","time","percentage","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,WAAf;AAA4BC,EAAAA,QAA5B;AAAsCC,EAAAA,UAAtC;AAAkDC,EAAAA,kBAAlD;AAAsEC,EAAAA;AAAtE,CAAD,KAA4F;AAE3G;AAEA,MAAIC,oBAAoB,GAAGT,iBAAiB,CAACG,WAAD,CAA5C;AACA,MAAIO,oBAAoB,GAAGV,iBAAiB,CAACI,WAAD,CAA5C;AACA,MAAIO,2BAA2B,GAAGX,iBAAiB,CAACK,QAAD,CAAnD,CAN2G,CAQ3G;;AACA,MAAIO,IAAI,GAAGL,kBAAkB,KAAK,OAAvB,GAAiCH,WAAjC,GAA+CD,WAA1D,CAT2G,CAW3G;;AACA,MAAIU,UAAU,GAAI,CAACD,IAAI,GAAGP,QAAR,IAAoBO,IAArB,GAA6B,GAA9C;AAGA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,kBAAkB,KAAK,OAAvB,GAAiC,UAAjC,GAA8C,UADjD,UACiE,GADjE,EAEGA,kBAAkB,KAAK,OAAvB,GACGE,oBADH,GAEGC,oBAJN,EAI4B,GAJ5B,YAFF,eAUE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,2BADH,eAVF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,eAgBE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEG,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeD,UALjB,CAK6B;AAL7B;AAME,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAG,GAAEF,UAAW;AAAvB,KANT,CAMsC;AANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADJ,CAhBF,CADF;AAiCD,CAhDD;;AAkDA,eAAeX,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst TimeLeft = ({ focusLength, breakLength, timeLeft, intervalId, currentSessionType, isTimerRunning }) => {\r\n\r\n  //change timeLeft whenever focusLength changes\r\n\r\n  let focusLengthInMinutes = secondsToDuration(focusLength);\r\n  let breakLengthInMinutes = secondsToDuration(breakLength);\r\n  let timeLeftInMinutesAndSeconds = secondsToDuration(timeLeft);\r\n\r\n  //if break, use breakLength for total time, focusLength for focus\r\n  let time = currentSessionType === 'Break' ? breakLength : focusLength\r\n\r\n  //percentage total time - time left for progress bar\r\n  let percentage = ((time - timeLeft )/ time) * 100\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n      <h2 data-testid=\"session-title\">\r\n        {currentSessionType === \"Focus\" ? \"Focusing\" : \"On Break\"} for{\" \"}\r\n        {currentSessionType === \"Focus\"\r\n          ? focusLengthInMinutes\r\n          : breakLengthInMinutes}{\" \"}\r\n        minutes\r\n      </h2>\r\n      {/* TODO: Update message below to include time remaining in the current session */}\r\n      <p className=\"lead\" data-testid=\"session-sub-title\">\r\n        {timeLeftInMinutesAndSeconds} remaining\r\n      </p>\r\n      <br/>\r\n      <br/>\r\n      <h3></h3>\r\n      <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percentage} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${percentage}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeLeft;\r\n"]},"metadata":{},"sourceType":"module"}