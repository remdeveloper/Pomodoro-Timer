{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R\\\\Documents\\\\Thinkful\\\\Module23 Project Pomodoro Timer\\\\Qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState, useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport TimeLeft from \"./TimeLeft\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  //beginning of focus length\n  const [focusLength, setFocusLength] = useState(60 * 25);\n  const [timeLeft, setTimeLeft] = useState(focusLength);\n  const [intervalId, setIntervalId] = useState(null); //null when stopped\n\n  const [currentSessionType, setCurrentSessionType] = useState(\"Focus\"); //focus or break\n\n  const decrementFocusLength = () => {\n    let newFocusLength = focusLength - 60 * 5;\n\n    if (newFocusLength < 300) {\n      setFocusLength(5 * 60);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  };\n\n  const incrementFocusLength = () => {\n    let newFocusLength = focusLength + 60 * 5;\n\n    if (newFocusLength > 60 * 60) {\n      setFocusLength(60 * 60);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  }; //beginning of break length\n\n\n  const [breakLength, setBreakLength] = useState(60 * 5);\n\n  const decrementBreakLength = () => {\n    let newBreakLength = breakLength - 60;\n\n    if (newBreakLength < 60) {\n      setBreakLength(60);\n    } else {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const incrementBreakLength = () => {\n    setBreakLength(breakLength + 60);\n  }; // Timer starts out paused\n\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  useEffect(() => {\n    if (timeLeft < 0) {\n      //when timer ends and session type is focus, go to break\n      if (currentSessionType === 'Focus') {\n        setTimeLeft(breakLength);\n        setCurrentSessionType('Break');\n      } else {\n        setTimeLeft(focusLength);\n        setCurrentSessionType('Focus');\n      }\n    }\n  }, [timeLeft]);\n  useEffect(() => {\n    return () => {\n      //cleanup for interval\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n\n    if (isTimerRunning) {\n      // console.log(isStarted);\n      clearInterval(intervalId); //clear the interval that is stored in intervalID when timer starts\n\n      setIntervalId(null); //puts it back to null once you hit pause\n    } else {\n      //if we are in paused mode\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          return prevTimeLeft - 1;\n        });\n      }, 1000);\n      setIntervalId(newIntervalId);\n    } //setinterval makes a new id, returns the id of that timer and saving that as interval id (lets you clear the timer later)\n    //line 75 clears it\n\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Focus, {\n    focusLength: focusLength,\n    decrementFocusLength: decrementFocusLength,\n    incrementFocusLength: incrementFocusLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Break, {\n    breakLength: breakLength,\n    decrementBreakLength: decrementBreakLength,\n    incrementBreakLength: incrementBreakLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 16\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TimeLeft, {\n    focusLength: focusLength,\n    breakLength: breakLength,\n    timeLeft: timeLeft,\n    currentSessionType: currentSessionType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/R/Documents/Thinkful/Module23 Project Pomodoro Timer/Qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useEffect","classNames","useInterval","Focus","Break","TimeLeft","minutesToDuration","Pomodoro","focusLength","setFocusLength","timeLeft","setTimeLeft","intervalId","setIntervalId","currentSessionType","setCurrentSessionType","decrementFocusLength","newFocusLength","incrementFocusLength","breakLength","setBreakLength","decrementBreakLength","newBreakLength","incrementBreakLength","isTimerRunning","setIsTimerRunning","clearInterval","playPause","prevState","newIntervalId","setInterval","prevTimeLeft","oi"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport TimeLeft from \"./TimeLeft\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  //beginning of focus length\n  const [focusLength, setFocusLength] = useState(60 * 25);\n  const [timeLeft, setTimeLeft] = useState(focusLength);\n  const [intervalId, setIntervalId] = useState(null); //null when stopped\n  const [currentSessionType, setCurrentSessionType] = useState(\"Focus\"); //focus or break\n\n  const decrementFocusLength = () => {\n    let newFocusLength = focusLength - 60 * 5;\n    if (newFocusLength < 300) {\n      setFocusLength(5 * 60);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  };\n\n  const incrementFocusLength = () => {\n    let newFocusLength = focusLength + 60 * 5;\n    if (newFocusLength > 60 * 60) {\n      setFocusLength(60 * 60);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  };\n\n  //beginning of break length\n  const [breakLength, setBreakLength] = useState(60 * 5);\n\n  const decrementBreakLength = () => {\n    let newBreakLength = breakLength - 60;\n    if (newBreakLength < 60) {\n      setBreakLength(60);\n    } else {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const incrementBreakLength = () => {\n    setBreakLength(breakLength + 60);\n  };\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  useEffect(() => {\n    if (timeLeft < 0) {\n      //when timer ends and session type is focus, go to break\n      if (currentSessionType === 'Focus') {\n        setTimeLeft(breakLength);\n        setCurrentSessionType('Break');\n      } else {\n        setTimeLeft(focusLength);\n        setCurrentSessionType('Focus');\n      }\n    }\n  }, [timeLeft]);\n\n  useEffect(() => {\n    return () => {\n      //cleanup for interval\n      clearInterval(intervalId);\n    }\n  }, [])\n  \n  function playPause() {\n   setIsTimerRunning((prevState) => !prevState);\n\n    if (isTimerRunning) {\n     // console.log(isStarted);\n      clearInterval(intervalId); //clear the interval that is stored in intervalID when timer starts\n      setIntervalId(null); //puts it back to null once you hit pause\n    } else {\n      //if we are in paused mode\n      const newIntervalId = setInterval(() => {\n        setTimeLeft((prevTimeLeft) => {\n          return prevTimeLeft - 1;\n        });\n      }, 1000);\n        \n      setIntervalId(newIntervalId);\n    }\n      //setinterval makes a new id, returns the id of that timer and saving that as interval id (lets you clear the timer later)\n      //line 75 clears it\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <Focus\n            focusLength={focusLength}\n            decrementFocusLength={decrementFocusLength}\n            incrementFocusLength={incrementFocusLength}\n          />\n        </div>\n        <div className=\"col\">\n          <Break\n            breakLength={breakLength}\n            decrementBreakLength={decrementBreakLength}\n            incrementBreakLength={incrementBreakLength}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n               <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n        \n            <TimeLeft focusLength={focusLength} breakLength={breakLength} timeLeft={timeLeft} currentSessionType={currentSessionType} />\n          </div>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}