{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R\\\\Documents\\\\Thinkful\\\\Module23 Project Pomodoro Timer\\\\Qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimeLeft.js\";\nimport React, { useState } from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { useEffect } from \"react\";\n\nconst TimeLeft = ({\n  focusLength,\n  breakLength\n}) => {\n  const [timeLeft, setTimeLeft] = useState(focusLength);\n  const [intervalId, setIntervalId] = useState(null); //null when stopped\n\n  const [currentSessionType, setCurrentSessionType] = useState(\"Focus\"); //focus or break\n  //change timeLeft whenever focusLength changes\n\n  useEffect(() => {\n    setTimeLeft(focusLength);\n  }, [focusLength]);\n  const isStarted = intervalId !== null; //when not null, timer started\n  //decrement timeLeft by one second\n\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      console.log(isStarted);\n      clearInterval(intervalId); //clear the interval that is stored in intervalID when timer starts\n\n      setIntervalId(null); //puts it back to null once you hit pause\n    } else {\n      //if we are in paused mode\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n\n          if (newTimeLeft >= 0) {\n            return prevTimeLeft - 1;\n          } //if focus\n\n\n          if (currentSessionType === \"Focus\") {\n            //switch to break\n            setCurrentSessionType(\"Break\"); //setTimeLeft to breakFocusLength\n\n            setTimeLeft(breakLength);\n          } //if break\n\n\n          if (currentSessionType === \"Break\") {\n            setCurrentSessionType(\"Focus\");\n            setTimeLeft(focusLength);\n          }\n        });\n      }, 50);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  let focusLengthInMinutes = secondsToDuration(focusLength);\n  let breakLengthInMinutes = secondsToDuration(breakLength);\n  let timeLeftInMinutesAndSeconds = secondsToDuration(timeLeft); //if break, use breakLength for total time, focusLength for focus\n\n  let time = currentSessionType === 'Break' ? breakLength : focusLength; //percentage total time - time left for progress bar\n\n  let percentage = (time - timeLeft) / time * 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, currentSessionType === \"Focus\" ? \"Focusing\" : \"On Break\", \" for\", \" \", currentSessionType === \"Focus\" ? focusLengthInMinutes : breakLengthInMinutes, \" \", \"minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, timeLeftInMinutesAndSeconds, \" remaining\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleStartStopClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Start\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percentage // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${percentage}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default TimeLeft;","map":{"version":3,"sources":["C:/Users/R/Documents/Thinkful/Module23 Project Pomodoro Timer/Qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeLeft.js"],"names":["React","useState","secondsToDuration","useEffect","TimeLeft","focusLength","breakLength","timeLeft","setTimeLeft","intervalId","setIntervalId","currentSessionType","setCurrentSessionType","isStarted","handleStartStopClick","console","log","clearInterval","newIntervalId","setInterval","prevTimeLeft","newTimeLeft","focusLengthInMinutes","breakLengthInMinutes","timeLeftInMinutesAndSeconds","time","percentage","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAkC;AACjD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAACI,WAAD,CAAxC;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,IAAD,CAA5C,CAFiD,CAEG;;AACpD,QAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,OAAD,CAA5D,CAHiD,CAGsB;AACvE;;AACAE,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,WAAW,CAACH,WAAD,CAAX;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,QAAMQ,SAAS,GAAGJ,UAAU,KAAK,IAAjC,CATiD,CASV;AAEvC;;AACA,QAAMK,oBAAoB,GAAG,MAAM;AACjC,QAAID,SAAJ,EAAe;AACbE,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAI,MAAAA,aAAa,CAACR,UAAD,CAAb,CAFa,CAEc;;AAC3BC,MAAAA,aAAa,CAAC,IAAD,CAAb,CAHa,CAGQ;AACtB,KAJD,MAIO;AACL;AACA,YAAMQ,aAAa,GAAGC,WAAW,CAAC,MAAM;AACtCX,QAAAA,WAAW,CAAEY,YAAD,IAAkB;AAC5B,gBAAMC,WAAW,GAAGD,YAAY,GAAG,CAAnC;;AACA,cAAIC,WAAW,IAAI,CAAnB,EAAsB;AACpB,mBAAOD,YAAY,GAAG,CAAtB;AACD,WAJ2B,CAK5B;;;AACA,cAAIT,kBAAkB,KAAK,OAA3B,EAAoC;AAClC;AACAC,YAAAA,qBAAqB,CAAC,OAAD,CAArB,CAFkC,CAIlC;;AACAJ,YAAAA,WAAW,CAACF,WAAD,CAAX;AACD,WAZ2B,CAa5B;;;AACA,cAAIK,kBAAkB,KAAK,OAA3B,EAAoC;AAClCC,YAAAA,qBAAqB,CAAC,OAAD,CAArB;AACAJ,YAAAA,WAAW,CAACH,WAAD,CAAX;AACD;AACF,SAlBU,CAAX;AAmBD,OApBgC,EAoB9B,EApB8B,CAAjC;AAqBAK,MAAAA,aAAa,CAACQ,aAAD,CAAb;AACD;AACF,GA9BD;;AA+BA,MAAII,oBAAoB,GAAGpB,iBAAiB,CAACG,WAAD,CAA5C;AACA,MAAIkB,oBAAoB,GAAGrB,iBAAiB,CAACI,WAAD,CAA5C;AACA,MAAIkB,2BAA2B,GAAGtB,iBAAiB,CAACK,QAAD,CAAnD,CA7CiD,CA+CjD;;AACA,MAAIkB,IAAI,GAAGd,kBAAkB,KAAK,OAAvB,GAAiCL,WAAjC,GAA+CD,WAA1D,CAhDiD,CAkDjD;;AACA,MAAIqB,UAAU,GAAI,CAACD,IAAI,GAAGlB,QAAR,IAAoBkB,IAArB,GAA6B,GAA9C;AAGA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,kBAAkB,KAAK,OAAvB,GAAiC,UAAjC,GAA8C,UADjD,UACiE,GADjE,EAEGA,kBAAkB,KAAK,OAAvB,GACGW,oBADH,GAEGC,oBAJN,EAI4B,GAJ5B,YAFF,eAUE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,2BADH,6BAEE;AAAQ,IAAA,OAAO,EAAEV,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,CAVF,eAcE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEa,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeD,UALjB,CAK6B;AAL7B;AAME,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAG,GAAEF,UAAW;AAAvB,KANT,CAMsC;AANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADJ,CAdF,CADF;AA+BD,CArFD;;AAuFA,eAAetB,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst TimeLeft = ({ focusLength, breakLength }) => {\r\n  const [timeLeft, setTimeLeft] = useState(focusLength);\r\n  const [intervalId, setIntervalId] = useState(null); //null when stopped\r\n  const [currentSessionType, setCurrentSessionType] = useState(\"Focus\"); //focus or break\r\n  //change timeLeft whenever focusLength changes\r\n  useEffect(() => {\r\n    setTimeLeft(focusLength);\r\n  }, [focusLength]);\r\n\r\n  const isStarted = intervalId !== null; //when not null, timer started\r\n\r\n  //decrement timeLeft by one second\r\n  const handleStartStopClick = () => {\r\n    if (isStarted) {\r\n      console.log(isStarted);\r\n      clearInterval(intervalId); //clear the interval that is stored in intervalID when timer starts\r\n      setIntervalId(null); //puts it back to null once you hit pause\r\n    } else {\r\n      //if we are in paused mode\r\n      const newIntervalId = setInterval(() => {\r\n        setTimeLeft((prevTimeLeft) => {\r\n          const newTimeLeft = prevTimeLeft - 1;\r\n          if (newTimeLeft >= 0) {\r\n            return prevTimeLeft - 1;\r\n          }\r\n          //if focus\r\n          if (currentSessionType === \"Focus\") {\r\n            //switch to break\r\n            setCurrentSessionType(\"Break\");\r\n\r\n            //setTimeLeft to breakFocusLength\r\n            setTimeLeft(breakLength);\r\n          }\r\n          //if break\r\n          if (currentSessionType === \"Break\") {\r\n            setCurrentSessionType(\"Focus\");\r\n            setTimeLeft(focusLength);\r\n          }\r\n        });\r\n      }, 50);\r\n      setIntervalId(newIntervalId);\r\n    }\r\n  };\r\n  let focusLengthInMinutes = secondsToDuration(focusLength);\r\n  let breakLengthInMinutes = secondsToDuration(breakLength);\r\n  let timeLeftInMinutesAndSeconds = secondsToDuration(timeLeft);\r\n\r\n  //if break, use breakLength for total time, focusLength for focus\r\n  let time = currentSessionType === 'Break' ? breakLength : focusLength\r\n\r\n  //percentage total time - time left for progress bar\r\n  let percentage = ((time - timeLeft )/ time) * 100\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n      <h2 data-testid=\"session-title\">\r\n        {currentSessionType === \"Focus\" ? \"Focusing\" : \"On Break\"} for{\" \"}\r\n        {currentSessionType === \"Focus\"\r\n          ? focusLengthInMinutes\r\n          : breakLengthInMinutes}{\" \"}\r\n        minutes\r\n      </h2>\r\n      {/* TODO: Update message below to include time remaining in the current session */}\r\n      <p className=\"lead\" data-testid=\"session-sub-title\">\r\n        {timeLeftInMinutesAndSeconds} remaining\r\n        <button onClick={handleStartStopClick}>Start</button>\r\n      </p>\r\n      <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percentage} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${percentage}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeLeft;\r\n"]},"metadata":{},"sourceType":"module"}