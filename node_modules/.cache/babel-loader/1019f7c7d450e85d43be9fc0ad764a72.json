{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R\\\\Documents\\\\Thinkful\\\\Module23 Project Pomodoro Timer\\\\Qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimeLeft.js\";\nimport React, { useState } from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { useEffect } from \"react\";\n\nconst TimeLeft = ({\n  focusLength,\n  breakLength\n}) => {\n  const [timeLeft, setTimeLeft] = useState(focusLength);\n  const [intervalId, setIntervalId] = useState(null); //null when stopped\n\n  const [currentSessionType, setCurrentSessionType] = useState('Focus'); //focus or break\n  //change timeLeft whenever focusLength changes\n\n  useEffect(() => {\n    setTimeLeft(focusLength);\n  }, [focusLength]);\n  const isStarted = intervalId !== null; //when not null, timer started\n  //decrement timeLeft by one second\n\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      console.log(isStarted);\n      clearInterval(intervalId); //clear the interval that is stored in intervalID when timer starts\n\n      setIntervalId(null); //puts it back to null once you hit pause\n    } else {\n      //if we are in paused mode\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n\n          if (newTimeLeft >= 0) {\n            return prevTimeLeft - 1;\n          } //if focus\n\n\n          if (currentSessionType === 'Focus') {\n            //switch to break  \n            setCurrentSessionType('Break'); //setTimeLeft to breakFocusLength\n\n            setTimeLeft(breakLength);\n          } //if break\n\n\n          if (currentSessionType === 'Break') {\n            setCurrentSessionType('Focus');\n            setTimeLeft(focusLength);\n          }\n        });\n      }, 50);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  let timeLeftInMinutesAndSeconds = secondsToDuration(timeLeft);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, timeLeftInMinutesAndSeconds, \" remaining\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleStartStopClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Start\")));\n};\n\nexport default TimeLeft;","map":{"version":3,"sources":["C:/Users/R/Documents/Thinkful/Module23 Project Pomodoro Timer/Qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeLeft.js"],"names":["React","useState","secondsToDuration","useEffect","TimeLeft","focusLength","breakLength","timeLeft","setTimeLeft","intervalId","setIntervalId","currentSessionType","setCurrentSessionType","isStarted","handleStartStopClick","console","log","clearInterval","newIntervalId","setInterval","prevTimeLeft","newTimeLeft","timeLeftInMinutesAndSeconds"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAiC;AAChD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAACI,WAAD,CAAxC;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,IAAD,CAA5C,CAFgD,CAEI;;AACpD,QAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,OAAD,CAA5D,CAHgD,CAGsB;AACtE;;AACAE,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,WAAW,CAACH,WAAD,CAAX;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,QAAMQ,SAAS,GAAGJ,UAAU,KAAK,IAAjC,CATgD,CAST;AAEvC;;AACA,QAAMK,oBAAoB,GAAG,MAAM;AACjC,QAAID,SAAJ,EAAe;AACbE,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAI,MAAAA,aAAa,CAACR,UAAD,CAAb,CAFa,CAEa;;AAC1BC,MAAAA,aAAa,CAAC,IAAD,CAAb,CAHa,CAGO;AASrB,KAZD,MAYO;AACL;AACA,YAAMQ,aAAa,GAAGC,WAAW,CAAC,MAAM;AACtCX,QAAAA,WAAW,CAAEY,YAAD,IAAkB;AAC5B,gBAAMC,WAAW,GAAGD,YAAY,GAAG,CAAnC;;AACA,cAAIC,WAAW,IAAI,CAAnB,EAAsB;AACpB,mBAAOD,YAAY,GAAG,CAAtB;AACD,WAJ2B,CAK5B;;;AACA,cAAIT,kBAAkB,KAAK,OAA3B,EAAmC;AAC/B;AACFC,YAAAA,qBAAqB,CAAC,OAAD,CAArB,CAFiC,CAMnC;;AACAJ,YAAAA,WAAW,CAACF,WAAD,CAAX;AACD,WAd6B,CAe5B;;;AACA,cAAIK,kBAAkB,KAAK,OAA3B,EAAmC;AAC/BC,YAAAA,qBAAqB,CAAC,OAAD,CAArB;AACAJ,YAAAA,WAAW,CAACH,WAAD,CAAX;AACH;AAEF,SArBU,CAAX;AAsBD,OAvBgC,EAuB9B,EAvB8B,CAAjC;AAwBAK,MAAAA,aAAa,CAACQ,aAAD,CAAb;AACD;AACF,GAzCD;;AA2CA,MAAII,2BAA2B,GAAGpB,iBAAiB,CAACK,QAAD,CAAnD;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGe,2BADH,6BAEE;AAAQ,IAAA,OAAO,EAAER,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,CAFF,CADF;AASD,CAlED;;AAoEA,eAAeV,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst TimeLeft = ({ focusLength, breakLength}) => {\r\n  const [timeLeft, setTimeLeft] = useState(focusLength);\r\n  const [intervalId, setIntervalId] = useState(null); //null when stopped\r\n  const [currentSessionType, setCurrentSessionType] = useState('Focus') //focus or break\r\n  //change timeLeft whenever focusLength changes\r\n  useEffect(() => {\r\n    setTimeLeft(focusLength);\r\n  }, [focusLength]);\r\n\r\n  const isStarted = intervalId !== null; //when not null, timer started\r\n\r\n  //decrement timeLeft by one second\r\n  const handleStartStopClick = () => {\r\n    if (isStarted) {\r\n      console.log(isStarted);\r\n      clearInterval(intervalId) //clear the interval that is stored in intervalID when timer starts\r\n      setIntervalId(null) //puts it back to null once you hit pause\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    } else {\r\n      //if we are in paused mode\r\n      const newIntervalId = setInterval(() => {\r\n        setTimeLeft((prevTimeLeft) => {\r\n          const newTimeLeft = prevTimeLeft - 1;\r\n          if (newTimeLeft >= 0) {\r\n            return prevTimeLeft - 1;\r\n          } \r\n          //if focus\r\n          if (currentSessionType === 'Focus'){\r\n              //switch to break  \r\n            setCurrentSessionType('Break')\r\n          \r\n     \r\n\r\n          //setTimeLeft to breakFocusLength\r\n          setTimeLeft(breakLength)\r\n        }\r\n          //if break\r\n          if (currentSessionType === 'Break'){\r\n              setCurrentSessionType('Focus')\r\n              setTimeLeft(focusLength)\r\n          }\r\n\r\n        });\r\n      }, 50);\r\n      setIntervalId(newIntervalId)\r\n    }\r\n  };\r\n\r\n  let timeLeftInMinutesAndSeconds = secondsToDuration(timeLeft);\r\n\r\n  return (\r\n    <div>\r\n      {/* TODO: Update message below to include time remaining in the current session */}\r\n      <p className=\"lead\" data-testid=\"session-sub-title\">\r\n        {timeLeftInMinutesAndSeconds} remaining\r\n        <button onClick={handleStartStopClick}>Start</button>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeLeft;\r\n"]},"metadata":{},"sourceType":"module"}