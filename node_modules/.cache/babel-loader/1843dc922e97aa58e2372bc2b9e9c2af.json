{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\R\\\\Documents\\\\Thinkful\\\\Module23 Project Pomodoro Timer\\\\Qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport TimeLeft from \"./TimeLeft\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  //beginning of focus length\n  const [focusLength, setFocusLength] = useState(60 * 25);\n\n  const decrementFocusLength = () => {\n    let newFocusLength = focusLength - 60 * 5;\n\n    if (newFocusLength < 300) {\n      setFocusLength(5 * 60);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  };\n\n  const incrementFocusLength = () => {\n    let newFocusLength = focusLength + 60 * 5;\n\n    if (newFocusLength > 60 * 60) {\n      setFocusLength(60 * 60);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  }; //beginning of break length\n\n\n  const [breakLength, setBreakLength] = useState(60 * 5);\n\n  const decrementBreakLength = () => {\n    let newBreakLength = breakLength - 60;\n\n    if (newBreakLength < 60) {\n      setBreakLength(60);\n    } else {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const incrementBreakLength = () => {\n    setBreakLength(breakLength + 60);\n  }; // Timer starts out paused\n\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  useInterval(() => {// ToDo: Implement what should happen when the timer is running\n    //timer starts to go down\n    //focusing for for x minutes appears\n    //bar with timer appears\n    //focus duration and break duration + - disabled\n    //play button becomes pause\n    //\n    //stop button is enabled\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n\n    if (isStarted) {\n      console.log(isStarted);\n      clearInterval(intervalId); //clear the interval that is stored in intervalID when timer starts\n\n      setIntervalId(null); //puts it back to null once you hit pause\n    } else {\n      //if we are in paused mode\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n\n          if (newTimeLeft >= 0) {\n            return prevTimeLeft - 1;\n          } //if focus\n\n\n          if (currentSessionType === \"Focus\") {\n            //switch to break\n            setCurrentSessionType(\"Break\"); //setTimeLeft to breakFocusLength\n\n            setTimeLeft(breakLength);\n          } //if break\n\n\n          if (currentSessionType === \"Break\") {\n            setCurrentSessionType(\"Focus\");\n            setTimeLeft(focusLength);\n          }\n        });\n      }, 30);\n      setIntervalId(newIntervalId);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Focus, {\n    focusLength: focusLength,\n    decrementFocusLength: decrementFocusLength,\n    incrementFocusLength: incrementFocusLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Break, {\n    breakLength: breakLength,\n    decrementBreakLength: decrementBreakLength,\n    incrementBreakLength: incrementBreakLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TimeLeft, {\n    focusLength: focusLength,\n    breakLength: breakLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/R/Documents/Thinkful/Module23 Project Pomodoro Timer/Qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","Focus","Break","TimeLeft","minutesToDuration","Pomodoro","focusLength","setFocusLength","decrementFocusLength","newFocusLength","incrementFocusLength","breakLength","setBreakLength","decrementBreakLength","newBreakLength","incrementBreakLength","isTimerRunning","setIsTimerRunning","playPause","prevState","isStarted","console","log","clearInterval","intervalId","setIntervalId","newIntervalId","setInterval","setTimeLeft","prevTimeLeft","newTimeLeft","currentSessionType","setCurrentSessionType","oi"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport TimeLeft from \"./TimeLeft\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  //beginning of focus length\n  const [focusLength, setFocusLength] = useState(60 * 25);\n\n  const decrementFocusLength = () => {\n    let newFocusLength = focusLength - 60 * 5;\n    if (newFocusLength < 300) {\n      setFocusLength(5 * 60);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  };\n\n  const incrementFocusLength = () => {\n    let newFocusLength = focusLength + 60 * 5;\n    if (newFocusLength > 60 * 60) {\n      setFocusLength(60 * 60);\n    } else {\n      setFocusLength(newFocusLength);\n    }\n  };\n\n  //beginning of break length\n  const [breakLength, setBreakLength] = useState(60 * 5);\n\n  const decrementBreakLength = () => {\n    let newBreakLength = breakLength - 60;\n    if (newBreakLength < 60) {\n      setBreakLength(60);\n    } else {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const incrementBreakLength = () => {\n    setBreakLength(breakLength + 60);\n  };\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      //timer starts to go down\n      //focusing for for x minutes appears\n      //bar with timer appears\n      //focus duration and break duration + - disabled\n      //play button becomes pause\n      //\n      //stop button is enabled\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n\n    if (isStarted) {\n      console.log(isStarted);\n      clearInterval(intervalId); //clear the interval that is stored in intervalID when timer starts\n      setIntervalId(null); //puts it back to null once you hit pause\n    } else {\n      //if we are in paused mode\n      const newIntervalId = setInterval(() => {\n        setTimeLeft((prevTimeLeft) => {\n          const newTimeLeft = prevTimeLeft - 1;\n          if (newTimeLeft >= 0) {\n            return prevTimeLeft - 1;\n          }\n          //if focus\n          if (currentSessionType === \"Focus\") {\n            //switch to break\n            setCurrentSessionType(\"Break\");\n\n            //setTimeLeft to breakFocusLength\n            setTimeLeft(breakLength);\n          }\n          //if break\n          if (currentSessionType === \"Break\") {\n            setCurrentSessionType(\"Focus\");\n            setTimeLeft(focusLength);\n          }\n        });\n      }, 30);\n      setIntervalId(newIntervalId);\n    }\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <Focus\n            focusLength={focusLength}\n            decrementFocusLength={decrementFocusLength}\n            incrementFocusLength={incrementFocusLength}\n          />\n        </div>\n        <div className=\"col\">\n          <Break\n            breakLength={breakLength}\n            decrementBreakLength={decrementBreakLength}\n            incrementBreakLength={incrementBreakLength}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n        \n            <TimeLeft focusLength={focusLength} breakLength={breakLength} />\n          </div>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}